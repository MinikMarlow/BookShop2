@page "/reviews/delete"
@using Microsoft.EntityFrameworkCore
@using BookApp.Data
@inject IDbContextFactory<BookApp.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Удаление отзыва</PageTitle>

<h1>Удаление отзыва</h1>
<hr />

@if (review is null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <div>
        <p>Вы уверены, что хотите удалить этот отзыв?</p>

        <dl class="row">
            <dt class="col-sm-2">Книга</dt>
            <dd class="col-sm-10">@bookTitle</dd>

            <dt class="col-sm-2">Оценка</dt>
            <dd class="col-sm-10">@review.Rating</dd>

            <dt class="col-sm-2">Текст отзыва</dt>
            <dd class="col-sm-10">@review.Text</dd>
        </dl>

        <form method="post">
            <button type="submit" class="btn btn-danger">Удалить</button> |
            <a href="/reviews">Назад к списку отзывов</a>
        </form>
    </div>
}

@code {
    private Review? review;
    private string bookTitle = string.Empty;

    [SupplyParameterFromQuery]
    private int ReviewId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        review = await context.Reviews
            .Include(r => r.Book)
            .FirstOrDefaultAsync(m => m.ReviewId == ReviewId);

        if (review is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
        else if (review.Book != null)
        {
            bookTitle = review.Book.Title;
        }
    }

    private async Task DeleteReview()
    {
        using var context = DbFactory.CreateDbContext();
        context.Reviews.Remove(review!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/reviews");
    }
}