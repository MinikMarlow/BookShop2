@page "/reviews/delete"
@attribute [Authorize(Roles = "Administrator")]
@inject NavigationManager NavigationManager
@inject ReviewService ReviewService

<PageTitle>Удалить отзыв</PageTitle>

<h1>Удалить отзыв</h1>

<p>Вы уверены, что хотите удалить этот отзыв?</p>
<div>
    <h2>Отзыв</h2>
    <hr />
    @if (review is null)
    {
        <p><em>Загрузка...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Книга</dt>
            <dd class="col-sm-10">@bookTitle</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Оценка</dt>
            <dd class="col-sm-10">@review.Rating</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Текст отзыва</dt>
            <dd class="col-sm-10">@review.Text</dd>
        </dl>

        <EditForm method="post" Model="review" OnValidSubmit="DeleteReview" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(review is null)">Удалить</button> |
            <a href="/reviews">Назад к списку отзывов</a>
        </EditForm>
    }
</div>

@code {
    private Review? review;
    private string? bookTitle;

    [SupplyParameterFromQuery]
    private int ReviewId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        review = await ReviewService.FindByIdAsync(ReviewId);

        if (review is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
        else if (review.Book != null)
        {
            bookTitle = review.Book.Title;
        }
    }

    private async Task DeleteReview()
    {
        if (review is not null)
            await ReviewService.DeleteAsync(review);

        NavigationManager.NavigateTo("/reviews");
    }
}