@page "/reviews/edit"
@inject NavigationManager NavigationManager
@inject ReviewService ReviewService

<PageTitle>Изменить</PageTitle>

<h1>Изменить</h1>

<h2>Отзыв</h2>
<hr />
@if (Review is null || Book is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Review" OnValidSubmit="UpdateReview" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert" />
                <input type="hidden" name="Review.ReviewId" value="@Review.ReviewId" />
                <div class="mb-3">
                    <label for="bookid" class="form-label">Id книги:</label>
                    <InputNumber id="bookid" @bind-Value="Review.BookId" class="form-control" />
                    <ValidationMessage For="() => Review.BookId" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Название книги:</label>
                    <p class="form-control-static">@Book.Title</p>
                </div>

                <div class="mb-3">
                    <label for="rating" class="form-label">Рейтинг:</label>
                    <InputNumber id="rating" @bind-Value="Review.Rating" class="form-control" />
                    <ValidationMessage For="() => Review.Rating" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="text" class="form-label">Текст:</label>
                    <InputText id="text" @bind-Value="Review.Text" class="form-control" />
                    <ValidationMessage For="() => Review.Text" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Сохранить</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/reviews">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int ReviewId { get; set; }

    [SupplyParameterFromForm]
    private Review? Review { get; set; }

    private Book? Book { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var review = await ReviewService.FindByIdAsync(ReviewId);
        Review ??= review;

        if (Review is null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        Book = review?.Book;
    }

    private async Task UpdateReview()
    {
        await ReviewService.UpdateAsync(Review);
        NavigationManager.NavigateTo("/reviews");
    }
}