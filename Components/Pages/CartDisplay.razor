@page "/cart"
@inject CartService CartService
@inject NavigationManager Navigation

<h3>Ваша корзина</h3>

@if (CartService.GetCartItems().Count == 0)
{
    <p>Корзина пуста</p>
    <button @onclick="ContinueShopping">Продолжить покупки</button>
}
else
{
    <div class="cart-items">
        @foreach (var item in CartItems)
        {
            <div class="cart-item">
                <h4>@item.Book?.Title</h4>
                <p>Цена: @item.Book?.Price.ToString("C")</p>
                <p>Количество: @item.Amount</p>
                <button @onclick="(() => RemoveItem(item.BookId))">Удалить</button>
            </div>
        }

        <div class="total">
            <h4>Итого: @CartService.GetTotalCost().ToString("C")</h4>
        </div>

        <button @onclick="ContinueShopping">Продолжить покупки</button>
        <button @onclick="Checkout">Оформить заказ</button>
    </div>
}

@code {
    private List<CartItem> CartItems;

    protected override void OnInitialized()
    {
        CartService.OnChange += StateHasChanged;
        CartItems = CartService.GetCartItems();
    }

    private void RemoveItem(int bookId)
    {
        CartService.RemoveFromCart(bookId);
    }

    private void ContinueShopping() => Navigation.NavigateTo("/");

    private async Task Checkout()
    {
        await CartService.CheckoutAsync();
        Navigation.NavigateTo("/orders");
    }

    public void Dispose()
    {
        CartService.OnChange -= StateHasChanged;
    }
}