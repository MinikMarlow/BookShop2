@page "/importexcel"
@using Microsoft.EntityFrameworkCore
@using BookApp.Data
@using ClosedXML.Excel
@inject IDbContextFactory<BookApp.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime js
@rendermode InteractiveServer

<PageTitle>Загрузка файла Excel для импорта в базу данных</PageTitle>

<p>
    <label>
        Укажите файл Excel для импорта:
        <InputFile OnChange="LoadFiles" />
    </label>
</p>

@if (isLoading)
{
    <p>Загрузка ...</p>
}
else
{
    <ul>
        <li>Количество импортированных книг: @bookList.Count()</li>
        <li>Количество импортированных отзывов: @reviewList.Count()</li>
        @if (StartTime != null)
        {
            TimeSpan ts = (EndTime ?? DateTime.Now).Subtract(StartTime ?? DateTime.Now);
            <li>Время выполнения: @String.Format("{0:00}:{1:00}", ts.Seconds, ts.Milliseconds / 10)</li>
        }
    </ul>
}

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div>Ошибка: @ErrorMessage</div>
}

@code {
    protected override async Task OnInitializedAsync() { await Task.CompletedTask; }

    public string ErrorMessage { get; set; } = "";
    DateTime? StartTime;
    DateTime? EndTime;
    private bool isLoading;
    string? errworksheet { get; set; } = "";
    int? errindexrow { get; set; } = 0;
    const int MAX_FILESIZE = 5000 * 1024; // 5 MB

    public List<Book> bookList = new();
    public List<Review> reviewList = new();

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        var browserFile = e.File;

        if (browserFile != null)
        {
            try
            {
                using (var fileStream = browserFile.OpenReadStream(MAX_FILESIZE))
                {
                    bookList = new();
                    reviewList = new();

                    var randomFile = Path.GetTempFileName();
                    var extension = Path.GetExtension(browserFile.Name);
                    var targetFilePath = Path.ChangeExtension(randomFile, extension);

                    using (var destinationStream = new FileStream(targetFilePath, FileMode.Create))
                    {
                        await fileStream.CopyToAsync(destinationStream);
                        StartTime = DateTime.Now;
                        await GetDataTableFromExcelAsync(destinationStream);
                        EndTime = DateTime.Now;
                    }
                }
            }
            catch (Exception exception)
            {
                ErrorMessage = exception.Message;
            }
        }
        isLoading = false;
    }

    public async Task GetDataTableFromExcelAsync(FileStream file)
    {
        using var context = DbFactory.CreateDbContext();
        using (XLWorkbook workbook = new XLWorkbook(file))
        {
            try
            {
                foreach (IXLWorksheet worksheet in workbook.Worksheets)
                {
                    errindexrow = 1;
                    errworksheet = worksheet.Name;

                    if (worksheet.Name == "Books")
                    {
                        foreach (IXLRow row in worksheet.RowsUsed().Skip(1))
                        {
                            errindexrow++;
                            Book book = new Book();
                            var range = worksheet.RangeUsed();
                            var table = range!.AsTable();

                            book.BookId = int.Parse(row.Cell(table.FindColumn(c =>
                                c.FirstCell().Value.ToString() == "BookId").RangeAddress.FirstAddress.ColumnNumber).Value.ToString());

                            book.Title = row.Cell(table.FindColumn(c =>
                                c.FirstCell().Value.ToString() == "Title").RangeAddress.FirstAddress.ColumnNumber).Value.ToString();

                            book.Author = row.Cell(table.FindColumn(c =>
                                c.FirstCell().Value.ToString() == "Author").RangeAddress.FirstAddress.ColumnNumber).Value.ToString();

                            book.Zhanr = row.Cell(table.FindColumn(c =>
                                c.FirstCell().Value.ToString() == "Zhanr").RangeAddress.FirstAddress.ColumnNumber).Value.ToString();

                            book.Opisanie = row.Cell(table.FindColumn(c =>
                                c.FirstCell().Value.ToString() == "Opisanie").RangeAddress.FirstAddress.ColumnNumber).Value.ToString();

                            book.Price = decimal.Parse(row.Cell(table.FindColumn(c =>
                                c.FirstCell().Value.ToString() == "Price").RangeAddress.FirstAddress.ColumnNumber).Value.ToString());

                            book.KolVoNaSklade = int.Parse(row.Cell(table.FindColumn(c =>
                                c.FirstCell().Value.ToString() == "KolVoNaSklade").RangeAddress.FirstAddress.ColumnNumber).Value.ToString());

                            bookList.Add(book);
                        }
                    }

                    errindexrow = 1;
                    if (worksheet.Name == "Reviews")
                    {
                        foreach (IXLRow row in worksheet.RowsUsed().Skip(1))
                        {
                            errindexrow++;
                            Review review = new Review();
                            var range = worksheet.RangeUsed();
                            var table = range!.AsTable();

                            review.ReviewId = int.Parse(row.Cell(table.FindColumn(c =>
                                c.FirstCell().Value.ToString() == "ReviewId").RangeAddress.FirstAddress.ColumnNumber).Value.ToString());

                            review.Rating = int.Parse(row.Cell(table.FindColumn(c =>
                                c.FirstCell().Value.ToString() == "Rating").RangeAddress.FirstAddress.ColumnNumber).Value.ToString());

                            review.Text = row.Cell(table.FindColumn(c =>
                                c.FirstCell().Value.ToString() == "Text").RangeAddress.FirstAddress.ColumnNumber).Value.ToString();

                            var bookId = int.Parse(row.Cell(table.FindColumn(c =>
                                c.FirstCell().Value.ToString() == "BookId").RangeAddress.FirstAddress.ColumnNumber).Value.ToString());

                            review.Book = bookList.Where(x => x.BookId == bookId).FirstOrDefault()!;

                            reviewList.Add(review);
                        }
                    }
                }

                errworksheet = "";
                foreach (var el in bookList) { el.BookId = 0; }
                foreach (var el in reviewList) { el.ReviewId = 0; }

                using (var tr = context.Database.BeginTransaction())
                {
                    context.AddRange(bookList);
                    context.AddRange(reviewList);
                    await context.SaveChangesAsync();
                    tr.Commit();
                }
            }
            catch (Exception exception)
            {
                if (errworksheet != "")
                    ErrorMessage = "Ошибка в импорте в таблице " + errworksheet + ", строка - " + errindexrow.ToString();
                ErrorMessage = exception.Message;
            }
        }
    }
}