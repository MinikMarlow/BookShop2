@page "/orders/delete"
@attribute [Authorize(Roles = "Administrator")]
@using Microsoft.EntityFrameworkCore
@using BookApp.Data
@inject IDbContextFactory<BookApp.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this order?</p>
<div>
    <h2>Order</h2>
    <hr />
    @if (order is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Order ID</dt>
            <dd class="col-sm-10">@order.OrderId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Total Sum</dt>
            <dd class="col-sm-10">@order.Summa.ToString("C")</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Status</dt>
            <dd class="col-sm-10">@order.StatusZakaza</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">User Email</dt>
            <dd class="col-sm-10">@order.UserEmail</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Payment Method</dt>
            <dd class="col-sm-10">@order.PaymentMethod</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Address</dt>
            <dd class="col-sm-10">@order.Address</dd>
        </dl>

        <h3>Order Items</h3>
        <table class="table">
            <thead>
                <tr>
                    <th>Book</th>
                    <th>Quantity</th>
                    <th>Price per unit</th>
                </tr>
            </thead>
            <tbody>
                @if (order.Items != null)
                {
                    @foreach (var item in order.Items)
                    {
                        <tr>
                            <td>@item.Book?.Title</td>
                            <td>@item.KolVo</td>
                            <td>@item.CenaZaEdinicy.ToString("C")</td>
                        </tr>
                    }
                }
            </tbody>
        </table>

        <EditForm method="post" Model="order" OnValidSubmit="DeleteOrder" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(order is null)">Delete Order</button> |
            <a href="/orders">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Order? order;

    [SupplyParameterFromQuery]
    private int OrderId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        order = await context.Orders
            .Include(o => o.Items!)
            .ThenInclude(i => i.Book)
            .FirstOrDefaultAsync(m => m.OrderId == OrderId);

        if (order is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteOrder()
    {
        using var context = DbFactory.CreateDbContext();
        var orderToDelete = await context.Orders.FindAsync(OrderId);

        if (orderToDelete == null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        context.Orders.Remove(orderToDelete);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/orders");
    }
    
}