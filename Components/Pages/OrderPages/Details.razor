@page "/orders/details"
@using Microsoft.EntityFrameworkCore
@using BookApp.Data
@inject IDbContextFactory<BookApp.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Детали</PageTitle>

<h1>Детали заказа</h1>

<div>
    <h2>Заказ</h2>
    <hr />
    @if (order is null)
    {
        <p><em>Загрузка...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Сумма</dt>
            <dd class="col-sm-10">@order.Summa</dd>
            <dt class="col-sm-2">Статус</dt>
            <dd class="col-sm-10">@order.StatusZakaza</dd>
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@order.UserEmail</dd>
            <dt class="col-sm-2">Книги</dt>
            <dd class="col-sm-10">
                @if (order.Items != null)
                {
                    @foreach (var item in order.Items)
                    {
                        <div>@item.Book?.Title (Количество: @item.KolVo)</div>
                    }
                }
            </dd>
        </dl>
        <div>
            <a href="@($"/orders/edit?orderid={order.OrderId}")">Редактировать</a> |
            <a href="@($"/orders")">Назад к списку</a>
        </div>
    }
</div>

@code {
    private Order? order;

    [SupplyParameterFromQuery]
    private int OrderId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        order = await context.Orders
            .Include(o => o.Items)
            .ThenInclude(i => i.Book)
            .FirstOrDefaultAsync(m => m.OrderId == OrderId);

        if (order is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}