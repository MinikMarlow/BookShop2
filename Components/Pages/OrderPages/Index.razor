@page "/orders"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using BookApp.Data
@implements IAsyncDisposable
@inject IDbContextFactory<BookApp.Data.ApplicationDbContext> DbFactory

<PageTitle>Заказы</PageTitle>

<div class="orders-page">
    <div class="orders-container">
        <h1>Заказы</h1>

        <div class="actions-header">
            <AuthorizeView Roles="Administrator">
                <a href="orders/create" class="btn btn-primary">Создать заказ</a>
            </AuthorizeView>
        </div>

        <QuickGrid Class="orders-grid" Items="@allOrders">
            <PropertyColumn Title="№" Property="@(order => order.OrderId)" />
            <PropertyColumn Title="Сумма" Property="@(order => order.Summa.ToString("C"))" Sortable="true" />
            <PropertyColumn Title="Статус" Property="@(order => order.StatusZakaza)" Sortable="true" />
            <PropertyColumn Title="Почта" Property="@(order => order.UserEmail)" Sortable="true" />

            <TemplateColumn Title="Книги" Context="order">
                @{
                    var itemsList = order.Items?.Select(item => $"{item.Book?.Title} (×{item.KolVo})") ?? Enumerable.Empty<string>();
                    <div>@string.Join(", ", itemsList)</div>
                }
            </TemplateColumn>

            <TemplateColumn Context="order">
                <div class="order-actions">
                    <a href="@($"orders/details?orderid={order.OrderId}")" class="btn btn-outline">Просмотр</a>
                    <AuthorizeView Roles="Administrator">
                        <a href="@($"orders/edit?orderid={order.OrderId}")" class="btn btn-outline">Изменить</a>
                        <a href="@($"orders/delete?orderid={order.OrderId}")" class="btn btn-outline delete-btn">Удалить</a>
                    </AuthorizeView>
                </div>
            </TemplateColumn>
        </QuickGrid>
    </div>
</div>

<style>
    /* Ваши стили остаются без изменений */
    .orders-page {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 20px;
    }

    .orders-container {
        background: white;
        padding: 30px;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
        margin-bottom: 40px;
    }

    .actions-header {
        margin-bottom: 30px;
        display: flex;
        justify-content: flex-end;
    }

    .orders-grid {
        width: 100%;
        border-collapse: collapse;
    }

        .orders-grid th {
            background-color: #f8f9fa;
            padding: 12px 15px;
            text-align: left;
            font-weight: 600;
            color: #2d3748;
            border-bottom: 2px solid #e2e8f0;
        }

        .orders-grid td {
            padding: 12px 15px;
            border-bottom: 1px solid #e2e8f0;
            vertical-align: middle;
        }

        .orders-grid tr:hover td {
            background-color: #f8f9fa;
        }

    .order-actions {
        display: flex;
        gap: 8px;
    }

    .btn {
        display: inline-block;
        padding: 8px 12px;
        border-radius: 6px;
        font-size: 0.85rem;
        font-weight: 500;
        text-align: center;
        text-decoration: none;
        cursor: pointer;
        border: 1px solid transparent;
        transition: all 0.2s;
    }

    .btn-primary {
        background-color: #4299e1;
        color: white;
    }

        .btn-primary:hover {
            background-color: #3182ce;
        }

    .btn-outline {
        background-color: white;
        border-color: #e2e8f0;
        color: #4a5568;
    }

        .btn-outline:hover {
            background-color: #f8f9fa;
            border-color: #cbd5e0;
        }

    @@media (max-width: 768px) {
        .orders-container {
            padding: 20px;
        }

        .order-actions {
            flex-direction: column;
            gap: 5px;
        }

        .orders-grid th,
        .orders-grid td {
            padding: 8px 10px;
        }
    }
</style>

@code {
    private ApplicationDbContext? dbContext;
    private IQueryable<Order>? allOrders;

    protected override async Task OnInitializedAsync()
    {
        dbContext = await DbFactory.CreateDbContextAsync();
        allOrders = dbContext.Orders
            .Include(o => o.Items)
            .ThenInclude(i => i.Book)
            .AsQueryable();
    }

    public async ValueTask DisposeAsync()
    {
        if (dbContext is not null)
        {
            await dbContext.DisposeAsync();
        }
    }
}