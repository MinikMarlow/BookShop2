@page "/books/create"
@attribute [Authorize(Roles="Administrator")]
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using BookApp.Data
@using System.IO
@inject IDbContextFactory<BookApp.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject IWebHostEnvironment Environment

<PageTitle>Создать книгу</PageTitle>

<h1>Создать книгу</h1>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Book" OnValidSubmit="AddBook" FormName="createBook" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="mb-3">
                <label for="title" class="form-label">Название:</label>
                <InputText id="title" @bind-Value="Book.Title" class="form-control" />
                <ValidationMessage For="() => Book.Title" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="author" class="form-label">Автор:</label>
                <InputText id="author" @bind-Value="Book.Author" class="form-control" />
                <ValidationMessage For="() => Book.Author" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="zhanr" class="form-label">Жанр:</label>
                <InputText id="zhanr" @bind-Value="Book.Zhanr" class="form-control" />
                <ValidationMessage For="() => Book.Zhanr" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="opisanie" class="form-label">Описание:</label>
                <InputTextArea id="opisanie" @bind-Value="Book.Opisanie" class="form-control" />
                <ValidationMessage For="() => Book.Opisanie" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="price" class="form-label">Цена:</label>
                <InputNumber id="price" @bind-Value="Book.Price" class="form-control" />
                <ValidationMessage For="() => Book.Price" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="kolvonasklade" class="form-label">Количество на складе:</label>
                <InputNumber id="kolvonasklade" @bind-Value="Book.KolVoNaSklade" class="form-control" />
                <ValidationMessage For="() => Book.KolVoNaSklade" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="bookImage" class="form-label">Загрузите изображение:</label>
                <InputFile id="bookImage" class="form-control"
                           accept=".jpg,.jpeg,.png"
                           OnChange="HandleImageFile" />
                <ValidationMessage For="() => Book.ImageFileName" class="text-danger" />

                @if (imagePreview != null)
                {
                    <div style="margin: 1rem; border: solid black 2px; width: 254px; height: 254px;">
                        <img src="@imagePreview" alt="Image Preview" style="width: 250px; height: 250px;" />
                    </div>
                }
            </div>

            <button type="submit" class="btn btn-primary">Создать</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/books">Назад к списку</a>
</div>

<style>
    /* Общие стили для страницы */
    .books-page {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 20px;
    }

    /* Стили для формы */
    .form-container {
        background: white;
        padding: 30px;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
        max-width: 800px;
        margin: 0 auto 40px;
    }

    .form-group {
        margin-bottom: 20px;
    }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: #4a5568;
        }

    .form-control {
        width: 100%;
        padding: 10px;
        border: 1px solid #e2e8f0;
        border-radius: 6px;
        font-family: inherit;
        font-size: inherit;
    }

        .form-control:focus {
            outline: none;
            border-color: #4299e1;
            box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.1);
        }

    /* Стили для превью изображения */
    .image-preview {
        margin: 15px 0;
        border: 2px solid #e2e8f0;
        border-radius: 6px;
        width: 254px;
        height: 254px;
        display: flex;
        align-items: center;
        justify-content: center;
        overflow: hidden;
    }

        .image-preview img {
            max-width: 250px;
            max-height: 250px;
            object-fit: contain;
        }

    /* Стили для кнопок */
    .form-actions {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
        margin-top: 30px;
    }

    /* Стили для валидации */
    .text-danger {
        color: #e53e3e;
        font-size: 0.85rem;
        margin-top: 5px;
    }

    .validation-message {
        color: #e53e3e;
        font-size: 0.85rem;
    }

    /* Адаптивные стили */
    @@media (max-width: 768px) {
        .form-container {
            padding: 20px;
        }

        .form-actions {
            flex-direction: column;
        }

            .form-actions .btn {
                width: 100%;
            }
    }
</style>

@code {
    private string? imagePreview;

    [SupplyParameterFromForm]
    private Book Book { get; set; } = new();

    private async Task HandleImageFile(InputFileChangeEventArgs e)
    {
        if (e.File != null && e.File.Size < 150000) // Ограничение 150KB
        {
            using var stream = new MemoryStream();
            await e.File.OpenReadStream().CopyToAsync(stream);
            Book.ImageData = stream.ToArray();
            Book.ImageFileName = e.File.Name;
            imagePreview = $"data:{e.File.ContentType};base64,{Convert.ToBase64String(Book.ImageData)}";
        }
    }


    private async Task AddBook()
    {
        using var context = DbFactory.CreateDbContext();
        context.Books.Add(Book);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/books");
    }
}