@page "/"
@using BookApp.Data
@using BookApp.Services
@using Microsoft.EntityFrameworkCore
@inject NavigationManager NavigationManager
@inject IDbContextFactory<ApplicationDbContext> DbFactory

<PageTitle>Best Books</PageTitle>

<div class="hero">
    <h1>Best Books</h1>
    <p>У нас лучшие книги со всего мира</p>
</div>

<div class="books-container">
    <h2>Наши книги</h2>

    @if (books.Any())
    {
        <div class="books-grid">
            @foreach (var book in books)
            {
                <div class="book-card">
                    @if (!string.IsNullOrEmpty(book.ImageFileName))
                    {
                        <div class="book-image">
                            <img src="@($"images/books/{book.ImageFileName}")" alt="@book.Title" />
                        </div>
                    }
                    <div class="book-details">
                        <h3>@book.Title</h3>
                        <p class="author">@book.Author</p>

                        @if (!string.IsNullOrEmpty(book.Opisanie))
                        {
                            <div class="description">@book.Opisanie</div>
                        }

                        <div class="price-stock">
                            @if (HasDiscount(book))
                            {
                                var discount = GetDiscount(book);
                                <span class="price" style="text-decoration: line-through;">@book.Price.ToString("C")</span>
                                <span class="price" style="color:red;">
                                    @((book.Price * (100 - discount.ProcentSkidki) / 100).ToString("C"))
                                    (@discount.ProcentSkidki%)
                                </span>
                            }
                            else
                            {
                                <span class="price">@book.Price.ToString("C")</span>
                            }
                            <span class="stock">Осталось: @book.KolVoNaSklade</span>
                        </div>
                        <div class="actions">
                            <a href="@($"/orders/create?bookId={book.BookId}")"
                               class="btn btn-primary btn-sm">Купить</a>
                            <div class="btn-group">
                                <a href="@($"/reviews?bookid={book.BookId}")"
                                   class="btn btn-outline-primary btn-sm">Просмотреть отзывы</a>
                                <a href="@($"/reviews/create?bookid={book.BookId}")"
                                   class="btn btn-outline-success btn-sm">Оставить отзыв</a>
                            </div>
                        </div>
                        </div>
                    </div>
            }
        </div>
    }
    else
    {
        <p class="no-results">Книги не найдены</p>
    }
</div>

<style>
    /* Общие стили текста */
    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        color: #333;
        line-height: 1.6;
    }

    h1, h2, h3 {
        font-weight: 600;
        color: #2d3748;
    }

    .hero {
        text-align: center;
        margin-top: 50px;
        background: #f8f9fa;
        padding: 30px 20px;
        border-radius: 8px;
        margin-bottom: 40px;
    }

        .hero h1 {
            font-size: 2.2rem;
            margin-bottom: 10px;
            color: #2d3748;
        }

        .hero p {
            font-size: 1.1rem;
            color: #4a5568;
        }

    .books-container {
        margin: 40px auto;
        max-width: 1200px;
        padding: 0 20px;
    }

        .books-container h2 {
            text-align: center;
            margin-bottom: 30px;
            font-size: 1.8rem;
            color: #2d3748;
            position: relative;
            padding-bottom: 10px;
        }

            .books-container h2:after {
                content: "";
                display: block;
                width: 80px;
                height: 3px;
                background: #e2e8f0;
                margin: 10px auto 0;
            }

    .books-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 25px;
    }

    .book-card {
        border: none;
        border-radius: 8px;
        overflow: hidden;
        background: white;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    }

    .book-image {
        height: 200px;
        overflow: hidden;
        display: flex;
        align-items: center;
        justify-content: center;
        background: #f8f9fa;
    }

        .book-image img {
            max-width: 100%;
            max-height: 100%;
            object-fit: contain;
        }

    .book-details {
        padding: 20px;
    }

        .book-details h3 {
            margin: 0 0 8px 0;
            font-size: 1.1rem;
            color: #2d3748;
        }

    .author {
        margin: 0 0 8px 0;
        color: #718096;
        font-size: 0.9rem;
    }

    .description {
        margin: 10px 0;
        font-size: 0.85rem;
        color: #4a5568;
        max-height: 60px;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .price-stock {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin: 15px 0;
    }

    .price {
        font-weight: 600;
        color: #2b6cb0;
        font-size: 1.1rem;
    }

    .stock {
        font-size: 0.85rem;
        color: #718096;
    }

    /* Стили кнопок */
    .actions {
        display: flex;
        flex-direction: column;
        gap: 8px;
        margin-top: 15px;
    }

    .btn {
        display: inline-block;
        padding: 8px 12px;
        border-radius: 6px;
        font-size: 0.85rem;
        font-weight: 500;
        text-align: center;
        text-decoration: none;
        cursor: pointer;
        border: 1px solid transparent;
    }

    .btn-primary {
        background-color: #4299e1;
        color: white;
    }

    .btn-outline {
        background-color: white;
        border-color: #e2e8f0;
        color: #4a5568;
    }

    .btn-group {
        display: flex;
        gap: 8px;
    }

        .btn-group .btn {
            flex: 1;
        }

    .no-results {
        text-align: center;
        color: #718096;
        padding: 40px 0;
    }
    
</style>

@code {
    private List<Book> books = new();
    private List<Discount> discounts = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadBooks();
    }

    private async Task LoadBooks()
    {
        using var context = DbFactory.CreateDbContext();
        books = await context.Books.ToListAsync();
        discounts = await context.Discounts
            .Where(d => d.DataNachala <= DateTime.Today && d.DataKonca >= DateTime.Today)
            .ToListAsync();
    }

    private bool HasDiscount(Book book) =>
        discounts.Any(d => d.BookId == book.BookId);

    private Discount GetDiscount(Book book) =>
        discounts.First(d => d.BookId == book.BookId);

    private void LeaveReview(Book book)
    {
        NavigationManager.NavigateTo($"/reviews/create?bookid={book.BookId}");
    }

    private void ViewReviews(Book book)
    {
        NavigationManager.NavigateTo($"/reviews?bookid={book.BookId}");
    }
}