@page "/discounts/delete"
@attribute [Authorize(Roles = "Administrator")]
@inject NavigationManager NavigationManager
@inject DiscountService DiscountService

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Discount</h2>
    <hr />
    @if (discount is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">BookId</dt>
            <dd class="col-sm-10">@discount.BookId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ProcentSkidki</dt>
            <dd class="col-sm-10">@discount.DiscountRate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DataNachala</dt>
            <dd class="col-sm-10">@discount.StartDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DataKonca</dt>
            <dd class="col-sm-10">@discount.EndDate</dd>
        </dl>
        <EditForm method="post" Model="discount" OnValidSubmit="DeleteDiscount" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(discount is null)">Delete</button> |
            <a href="/discounts">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Discount? discount;

    [SupplyParameterFromQuery]
    private int DiscountId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        discount = await DiscountService.FindByIdAsync(DiscountId);

        if (discount is null)
            NavigationManager.NavigateTo("notfound");
    }

    private async Task DeleteDiscount()
    {
        await DiscountService.DeleteAsync(discount);
        NavigationManager.NavigateTo("/discounts");
    }
}
